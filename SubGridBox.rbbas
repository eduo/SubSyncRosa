#tag ClassProtected Class SubGridBoxInherits CColumnResize	#tag Event		Sub ControlCreated()		  me.LockDrawing = true		  me.SetUpGridbox(true)		  me.AdjustListBoxSize(10)		  me.LockDrawing = false		End Sub	#tag EndEvent	#tag Event		Sub ControlResized()		  me.LockDrawing = true		  me.SetUpGridbox		  me.LockDrawing = false		End Sub	#tag EndEvent	#tag Event		Sub DropObject(obj As DragItem, action As Integer)		  if me.rows = 0 then		    me.AcceptFileDrop(FileTypes.Subtitle)		  end if		End Sub	#tag EndEvent	#tag Event		Sub Open()		  'generateCellGraphics		  		  Me.GetDefaultStyle.TextColor = &c333333		  Me.GetDefaultStyle.BackColor = &cFFFFCC		  Me.GetDefaultStyle.FontSize = 11		  Me.GetDefaultStyle.HasBackColor = True		  'RGB(255,0,0)		  Me.GetDefaultStyle.Mutate		  		  outsideLineStyle = new StyleGridStyle(me.GetDefaultStyle())		  outsideLineStyle.Mutate		  		  insideLineStyle = new StyleGridStyle(me.GetDefaultStyle())		  insideLineStyle.BackColor = &cFFFFCC		  insideLineStyle.Mutate		  		  startLineStyle = new StyleGridStyle(me.GetDefaultStyle())		  startLineStyle.BackColor = X11Colour("saddlebrown")		  startLineStyle.TextColor = X11Colour("White")		  startLineStyle.Mutate		  		  endLineStyle = new StyleGridStyle(me.GetDefaultStyle())		  endLineStyle.BackColor = X11Colour("teal")		  endLineStyle.Mutate		  		  dim hStyle as StyleGridStyle		  hStyle = me.GetHeaderDefaultStyle		  hStyle.TextColor = X11Colour("lightgrey")		  hstyle.BackColor = hStyle.TextColor		  hStyle.Mutate		  		  me.column(1).CellFactoryID = CellFactoryType.Extended		  me.column(1).Header.Text = ""		  me.column(2).CellFactoryID = CellFactoryType.Extended		  me.column(2).Header.Text = ""		  me.column(3).CellFactoryID = CellFactoryType.Extended		  me.column(3).Header.Text = ""		End Sub	#tag EndEvent	#tag Event		Sub SelectionChanged()		  Me.LockDrawing = True		  		  dim ok as boolean		  'ok =  paintRows(x,y)		  ok = paintRows(me.Selection.LastSelectedRow)		  me.Selection.Clear		  Me.LockDrawing = False		  return 		  'ok		  		  'dim pSelection as StyleGridSelection		  'pSelection = me.Selection		  'pSelection.Clear		End Sub	#tag EndEvent	#tag Method, Flags = &h1		Protected Sub generateCellGraphics()		  dim p as picture		  		  p = new picture(1,me.DefaultRowHeight,32)		  cellGraphics = p		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function GetStringHeight(myText as string) As integer		  dim g as graphics		  dim p as picture		  p = new picture( 1, 1, 1 )		  g = p.graphics		  		  g.textFont = "Verdana"		  g.textSize = 12		  		  return g.stringheight(myText,1024)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function paintRows(thisRow as integer, optional pelos as integer) As boolean		  'Dim thisRow,thisColumn As Integer		  		  'Me.CellFromPoint(x,y,thisColumn,thisRow)		  dim thisColumn as integer		  if thisRow > me.rows then exit		  		  If thisRow > 0 Then		    		    'If Me.mode = "sync" Or Me.mode = "master" Then		    		    'me.Selected(thisRow) = false		    		    While True = True		      		      If Keyboard.AltKey Then		        If selectStartRow >= thisRow Then selectStartRow = 1		        selectEndRow = thisRow		        Exit		      Elseif Keyboard.ShiftKey Then		        If selectEndRow <= thisRow Then selectEndRow = me.rows		        selectStartRow = thisRow		        Exit		      End If		      		      'if thisRow < selectStartRow then		      'selectStartRow = thisRow		      'exit		      'elseif thisRow > selectEndRow then		      'selectEndRow = thisRow		      'exit		      'elseif thisRow = selectStartRow then		      'selectStartRow = 1		      'exit		      'elseif thisRow = selectEndRow then		      'selectEndRow = me.rows		      'exit		      'end if		      '		      'If selectStartRow >= 1 And selectEndRow > selectStartRow And selectEndRow - selectStartRow > 5 Then		      '		      'If (thisRow - selectStartRow) > (selectEndRow - thisRow) Then		      'selectEndRow = thisRow		      'Exit		      'Else		      'selectStartRow = thisRow		      'Exit		      'End If		      '		      'Exit		      'End If		      		      Exit		    Wend		    		    'End If		    		  end if		  		  if me.rows > 0 then		    		    For thisRow = 1 To Me.rows		      for thisColumn = 1 to me.cols		        		        If selectEndRow = thisRow Then		          Me.cell(thisColumn,thisRow).Style = endLineStyle		          'g.ForeColor = X11Colour("teal")		        Elseif selectStartRow = thisRow Then		          'g.ForeColor = X11Colour("saddlebrown")		          Me.cell(thisColumn,thisRow).Style = startLineStyle		        Else		          		          if thisRow < selectStartRow then		            Me.cell(thisColumn,thisRow).Style = outsideLineStyle		          elseif thisRow > selectEndRow and selectEndRow > -1 then		            Me.cell(thisColumn,thisRow).Style = outsideLineStyle		          elseif thisRow > selectStartRow then		            Me.cell(thisColumn,thisRow).Style = insideLineStyle		          elseif thisRow < selectEndRow then		            Me.cell(thisColumn,thisRow).Style = insideLineStyle		          end if		          		        End If		        		      next		    Next		    'End If		  End If		  		  		  'End If		  		  Return True		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ParseSubtitle(subfile as FolderItem)		  		  If subfile <> Nil Then		    //proceed normally		    If mySub Is Nil Then		      mySub = New subClass		    End If		    		    mySub.processSubFile(subfile)		    		    me.ParseSubtitle(mySub)		    'system.Log(system.LogLevelError,"Finished")		    		    If origSub Is Nil Then		      origSub = New subClass		      origSub = mySub		    End If		    		    		  Else		    //User Cancelled		    		  End If		  		  'system.Log(system.LogLevelError,"Finished")		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ParseSubtitle(mySub as subClass)		  If Me.Rows > 0 Then		    Me.RemoveRow(1,Me.rows)		  End If		  		  If mySub Is Nil Then		    MsgBox "Error in subtitles"		  Else		    		    'Dim textHeight As Integer = getStringHeights(cellGraphics.Graphics)		    '		    'Dim thisPicture As picture		    'thisPicture = New picture(1,textHeight,32)		    'cellGraphics = thisPicture		    		    Dim oCell As StyleGridCell		    Dim oRow As StyleGridRow		    		    // Here we set the Text of the default Cell		    // (The Default Cell is rendered when ever a		    // non existant cell is rendered (virtual cell)		    // real cells are also constructed from the values		    // of the default Cell, new real cells inherit everything		    // except the text from the default cell		    // --------------------------------------------		    oCell = Me.GetDefaultCell		    oCell.Text = "Default text"		    // --------------------------------------------		    		    For i As Integer = 0 To mySub.subLines.Ubound		      Dim subLineTime,subLineDuration,subLineText As String		      subLineTime = mySub.subLines(i).startTime		      subLineDuration = Str(mySub.subLines(i).durationSeconds)		      		      Dim nRow As New StyleGridRow(Me)		      Dim pStyle as StyleGridStyle		      pStyle = new StyleGridStyle(me.GetDefaultStyle())		      pStyle.BackColor = insideLineStyle.BackColor		      		      nRow.cell(1).Style = pStyle		      nRow.cell(1).BorderTop = False		      nRow.cell(1).BorderBottom = False		      'nRow.WritableCell(1).Text = subLineTime		      'nRow.WritableCell(1).Text = mySub.subLines(i).startSeconds		      nRow.WritableCell(1).Text = secondsToTimestring(mySub.subLines(i).startSeconds)		      		      nRow.WritableCell(2).Text = format(subLineDuration.Val,"#.000")		      subLineText = mySub.subLines(i).lines		      		      'dim thisEnc as TextEncoding		      'thisEnc = mySub.encoding		      'subLineText = subLineText.DefineEncoding(thisEnc)		      nRow.WritableCell(3).Text = subLineText		      		      nRow.ItemData = mySub.subLines(i)		      Me.AppendRow(nRow)		      nRow.Recreate		    Next		    		    if selectStartRow= -1 then selectStartRow = 1		    if selectEndRow = -1 then selectEndRow = me.Rows		    		  End If		  		  system.Log(system.LogLevelError,"Finished")		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function saveSubtitle() As boolean		  dim s as subClass		  s = mysub		  		  dim newSub as FolderItem		  		  Dim dlg as New SaveAsDialog		  dlg.InitialDirectory=s.subFile.Parent		  dlg.promptText="Save new subtitle asâ€¦"		  dlg.SuggestedFileName="new_"+s.subFile.Name		  dlg.Title="Choose subtitle name and location"		  dlg.Filter=FileTypes.Subtitle //defined as a file type in FileTypes1 file type set		  newSub=dlg.ShowModal()		  		  #if DebugBuild then		    if newSub = nil then // Cancelled dialog		      newSub = new FolderItem(s.subFile.Parent.child("test"+s.subFile.Name))		    end if		  #endif		  		  dim EOF as string = EndOfLine.Windows		  		  if newSub <> nil then		    		    dim subString as string		    for i as integer = 0 to s.subLines.Ubound		      dim tsl as subLine = s.subLines(i)		      dim thisSubLineString as string		      dim thisLine as integer = i + 1		      dim theseTimings as string = secondsToTimestring(tsl.startSeconds)+" --> "+secondsToTimestring(tsl.endSeconds)		      dim theseLines as string = tsl.lines(EOF)		      		      thisSubLineString = str(thisLine)+EOF+theseTimings+EOF+theseLines+EOF		      		      subString = subString + thisSubLineString + EOF		      		    next		    		    try		      		      if newSub.exists then		        dim backSub as FolderItem = new FolderItem(newsub.parent.child(newsub.Name + "~"))		        if backSub.Exists then backSub.Delete		         newSub.MoveFileTo(backSub)		      end if		      		      dim substr as BinaryStream = BinaryStream.Create(newSub)		      substr.Write(subString.ConvertEncoding(Encodings.UTF8))		      substr = nil		      		      newSub.RevealDT		      return true		      		    catch err as IOException		      		      MsgBox("Couldn't write new sub: "+newSub.ShellPath)		      return false		      		    end try		    		  else 		    return false		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub SetUpGridbox(optional reDraw as boolean = false)		  me.Column(1).CellFactoryID = 1		  me.Column(1).Width = 80		  		  me.Column(2).CellFactoryID = 1		  me.Column(2).Width = 50		  me.Column(2).Alignment = 1		  me.Column(2).Alignment = 1		  		  me.Column(3).CellFactoryID = 1		  me.Column(3).Width = me.Width - (me.Column(1).Width + me.column(2).Width)		  me.Column(3).Alignment = 1		  		  if reDraw then ParseSubtitle(mySub)		  if reDraw then 		    dim ok as boolean 		    ok = paintRows(1,1)		  end if		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub updateSubTimings(startLine as integer,startSeconds as double,endLine as integer,endSeconds as double,shift as double, optional allLines as boolean)		  mySub.updateAllTimings(startLine,startSeconds,endLine,endSeconds,shift,allLines)		  me.LockDrawing = true		  ParseSubtitle(mySub)		  dim ok as boolean = paintRows(1,1)		  me.AdjustListBoxSize(10)		  me.LockDrawing = false		End Sub	#tag EndMethod	#tag Property, Flags = &h1		Protected cellGraphics As Picture	#tag EndProperty	#tag Property, Flags = &h0		endLineStyle As StyleGridStyle	#tag EndProperty	#tag Property, Flags = &h0		insideLineStyle As StyleGridStyle	#tag EndProperty	#tag Property, Flags = &h0		mode As string = """new"""	#tag EndProperty	#tag Property, Flags = &h0		mySub As subClass	#tag EndProperty	#tag Property, Flags = &h0		origSub As subClass	#tag EndProperty	#tag Property, Flags = &h0		outsideLineStyle As StyleGridStyle	#tag EndProperty	#tag Property, Flags = &h0		selectEndRow As Integer = -1	#tag EndProperty	#tag Property, Flags = &h0		selectStartRow As Integer = -1	#tag EndProperty	#tag Property, Flags = &h0		startLineStyle As StyleGridStyle	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="AreaSelection"			Visible=true			Group="Selection"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="AutoDeactivate"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="CellEvenColor"			Visible=true			Group="Colors"			Type="Color"			EditorType="Color"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="CellOddColor"			Visible=true			Group="Colors"			Type="Color"			EditorType="Color"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="Cols"			Visible=true			Group="Appearance"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="CornerBtnEnabled"			Visible=true			Group="CornerButton"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="DefaultColumnWidth"			Visible=true			Group="Appearance"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="DefaultRowHeight"			Visible=true			Group="Appearance"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="Enabled"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="EvenBackColor"			Visible=true			Group="Colors"			Type="Color"			EditorType="Color"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="FreezeCols"			Visible=true			Group="Appearance"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="GetFocusOnClick"			Visible=true			Group="Appearance"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="GridLineColor"			Visible=true			Group="Colors"			Type="Color"			EditorType="Color"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="HasBackColor"			Visible=true			Group="Colors"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="HasCellGridLineColor"			Visible=true			Group="Colors"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="HasHeader"			Visible=true			Group="Appearance"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="HasInactiveSelectionColor"			Visible=true			Group="Colors"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="HasOutOfBoundsGridLineColor"			Visible=true			Group="Colors"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="HasSelectedTextColor"			Visible=true			Group="Colors"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="HasSelectionColor"			Visible=true			Group="Colors"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="Height"			Visible=true			Group="Position"			InitialValue="100"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="HelpTag"			Visible=true			Group="Appearance"			Type="String"			EditorType="MultiLineEditor"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="HorizontalGrid"			Visible=true			Group="Grid lines"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="HorizontalScrollbar"			Visible=true			Group="Appearance"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="HotTrack"			Visible=true			Group="Selection"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="InactiveSelectionColor"			Visible=true			Group="Colors"			Type="Color"			EditorType="Color"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="InitialParent"			Group="Position"			Type="String"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="LiveScroll"			Visible=true			Group="Behavior"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="LockBottom"			Visible=true			Group="Position"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="LockLeft"			Visible=true			Group="Position"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="LockRight"			Visible=true			Group="Position"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="LockTop"			Visible=true			Group="Position"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="mode"			Group="Behavior"			InitialValue="""""new"""""			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			EditorType="String"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="OddBackColor"			Visible=true			Group="Colors"			Type="Color"			EditorType="Color"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="OutOfBoundsGridLineColor"			Visible=true			Group="Colors"			Type="Color"			EditorType="Color"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="PopupMenuCellFullSensitivity"			Visible=true			Group="Behavior"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="RenderSortOrder"			Visible=true			Group="CornerButton"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="Rows"			Visible=true			Group="Appearance"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="SelectedTextColor"			Visible=true			Group="Colors"			Type="Color"			EditorType="Color"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="selectEndRow"			Group="Behavior"			InitialValue="-1"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="SelectEntireRow"			Visible=true			Group="Selection"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="SelectionColor"			Visible=true			Group="Colors"			Type="Color"			EditorType="Color"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="selectStartRow"			Group="Behavior"			InitialValue="-1"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="ShadeSelection"			Visible=true			Group="Selection"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="ShowResizeGlyph"			Visible=true			Group="Appearance"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="StartupCocoaFont"			Visible=true			Group="Font"			Type="String"			EditorType="String"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="StartupLinuxFont"			Visible=true			Group="Font"			Type="String"			EditorType="String"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="StartupLinuxFontSize"			Visible=true			Group="Font"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="StartupMacFont"			Visible=true			Group="Font"			Type="String"			EditorType="String"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="StartupMacFontSize"			Visible=true			Group="Font"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="StartupWin32Font"			Visible=true			Group="Font"			Type="String"			EditorType="String"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="StartupWin32FontSize"			Visible=true			Group="Font"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"			EditorType="String"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="TabIndex"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="TabPanelIndex"			Group="Position"			InitialValue="0"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="TabStop"			Visible=true			Group="Position"			InitialValue="True"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="UseFocusRing"			Visible=true			Group="Appearance"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="VerticalGrid"			Visible=true			Group="Grid lines"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="VerticalScrollbar"			Visible=true			Group="Appearance"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="Visible"			Visible=true			Group="Appearance"			InitialValue="True"			Type="Boolean"			EditorType="Boolean"			InheritedFrom="StyleGrid"		#tag EndViewProperty		#tag ViewProperty			Name="Width"			Visible=true			Group="Position"			InitialValue="150"			Type="Integer"			EditorType="Integer"			InheritedFrom="StyleGrid"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass