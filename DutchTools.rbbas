#tag ModuleProtected Module DutchTools	#tag Method, Flags = &h0		Sub CenterPictDT(p as Picture, c as canvas)		  dim xp,xpmask as Picture		  		  xp = new Picture(p.Width,p.Height,32)		  xpmask = new Picture(p.Width,p.Height,32)		  		  xpmask.Graphics.DrawPicture p.Mask,0,0		  xp.Mask.Graphics.DrawPicture xpmask,0,0		  xp.Graphics.DrawPicture p,0,0		  		  c.Graphics.DrawPicture xp,(c.Width/2)-(xp.Width/2),(c.Height/2)-(xp.Height/2)		  		  ' Method created by: "ivanomonti"		  ' Info from the forums:		  ' This method will center a picture into a canvas		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ContainsDT(Extends source As string, Find As string) As boolean		  if source.InStr( Find ) > 0 Then Return True		  		  Return False		  		  ' no more need for integer check on InStr() but just a boolean if found more then 0 items		  ' This function was made by: "relaht" (originally)		  		  		  ' From original post...		  //if header.Contains( ".gif") then		  //is the same as if Instr( header, ".gif" ) > 0 then		  		  ' this inspired me to write the same for DutchTools		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function DecimalRightCountDT(Extends Value As Double) As Integer		  Dim ValueString As String = Str(Value)		  If (ValueString.InStr(".") = -1) Then Return 0		  		  Return NthField(ValueString, ".", 2).Len		  		  // Brought to you by: Jason_Adams		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function DecimalRightValueDT(Extends Value As Double) As Double		  Dim IntValue As Integer		  		  If (Value < 0) Then		    IntValue = Ceil(Value)		  Else		    IntValue = Floor(Value)		  End If		  		  Return Value - IntValue		  		  // Method brought to you by: Jason_Adams		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub DrawCircleDT(extends g As Graphics, CenterX As Integer, CenterY as Integer, Diameter As Integer)		  		  //-- Simply draws a circle.		  //   CenterX, CenterY are the center's coordinates.		  //   Diameter is the circle's diameter.		  		  Dim theRadial As Integer = Diameter / 2		  g.DrawOval CenterX - theRadial, CenterY - theRadial, Diameter, Diameter		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub DrawPictureIntoDT(Extends g As Graphics, p As Picture, KeepProportions As Boolean = True, ResizeSmaller As Boolean = False)		  		  //-- Draw a picture to fit a Graphics object's size.		  //   p is the Picture to draw		  //		  //   KeepProportions: If True ( Default ), the picture's aspect ratio wil be respected.		  //                    If False, the picture will be redimensioned to fit the Graphics object entirely		  //		  //		  //   ResizeSmaller: If True, the smaller pictures wil be resized to fit the Graphics object dimensions.		  //                  If False ( default ), the smaller pictures will just be drawn centered		  		  // Precondition		  If p Is Nil then Return		  		  // Here we go.		  If KeepProportions then		    		    // No needs to keep the proportions, so just fill g entirely with the p.		    g.DrawPicture p, 0, 0, g.Width, g.Height, 0, 0, p.Width, p.Height		    		  Else		    		    If p.Width <= g.Width AND p.Height <= g.Height AND Not ResizeSmaller then		      		      // The picture is smaller than g size, so we just need to draw it centered.		      g.DrawPicture p, (g.width - p.Width)/2, (g.Height - p.Height)/2		      		    Else		      		      Dim XScale, YScale, ScaleFactor As Double		      Dim NewWidth, NewHeight As Integer		      		      // At least one of the picture's dimensions is bigger than g size		      // So we choose the smallest scaling factor.		      XScale = g.Width / p.Width		      YScale = g.Height / p.Height		      ScaleFactor = min(XScale, YScale)		      		      // Compute the new sizes		      NewWidth  = Round( p.Width*ScaleFactor )		      NewHeight = Round( p.Height*ScaleFactor )		      		      // Draw the picture scaled		      g.DrawPicture p, ( g.width - NewWidth ) / 2, ( g.Height - NewHeight ) / 2, NewWidth, NewHeight, 0, 0, p.Width, p.Height		      		    End If		    		  End If		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ElasticPictDT(p as Picture, c as canvas)		  dim xp,xpmask as Picture		  		  xp = new Picture(c.Width,c.Height,32)		  xpmask = new Picture(c.Width,c.Height,32)		  		  xpmask.Graphics.DrawPicture p.Mask,0,0,c.Width,c.Height,0,0,p.Width,p.Height		  xp.Mask.Graphics.DrawPicture xpmask,0,0		  xp.Graphics.DrawPicture p,0,0,c.Width,c.Height,0,0,p.Width,p.Height		  		  c.Graphics.DrawPicture xp,0,0		  		  ' Method made by: "ivanomonti"		  ' info from the forums:		  ' helps a large picture fit into canvas		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ExtensionDT(Extends f As FolderItem) As String		  If f.Directory Or CountFields(f.Name, ".") = 0 Then Return ""		  		  Return NthField(f.Name, ".", CountFields(f.Name, "."))		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetAppFolderDT() As folderItem		  'Geef de applicatie map door, kiest Automatisch de juiste type		  Dim f as FolderItem = GetFolderItem("")		  #If DebugBuild Then f = f.Parent		  Return f		  		  ' This function is created by: "denisc"		  ' Search for "GetAppFolder" on the forums to find original post		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function IsLowerCaseDT(Extends s As string) As boolean		  ' return a Boolean to the user. 		  if asc(s) >= 65 and asc(s) <= 90 then		    ' we have no Lowercase string here, so return False		    return false		  elseif asc(s) >= 97 and asc(s) <= 122 then		    ' we have a Lowercase string, so return True		    return true		  end if		  		  ' this function is made by: "serd83"		  ' search for "IsLowerCase" on te forums to find original post 		  		  ' updated to "Extends", with thanks to "Jason_Addams" for the suggestion.		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub MagnifyPictDT(c as canvas, x as integer, y as Integer)		  dim xp,xpmask as Picture		  		  xp = new Picture(128,128,32)		  xpmask = new Picture(128,128,32)		  		  xpmask.Graphics.ForeColor = &c000000		  xpmask.Graphics.FillOval 0,0,128,128		  		  xp.Mask.Graphics.DrawPicture xpmask,0,0		  xp.Graphics.DrawPicture c.Backdrop,0,0,128,128,x,y,64,64		  		  c.Refresh(false)		  		  c.Graphics.DrawPicture xp,x,y		  c.Graphics.PenHeight = 2		  c.Graphics.PenWidth = 2		  c.Graphics.ForeColor = &cffffff		  c.Graphics.DrawOval x,y,128,128		  		  ' Method created by: "ivanomonti"		  ' info from the forums:		  ' A magnify effect into a canvas		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub MaxWindowSizeDT(Extends Wnd As window, screenNumber As integer = 0)		  ' This function sets the window maximum width and height according to the maximum screen(0) size automatic		  		  Wnd.MaxWidth = Screen(screenNumber).Width		  Wnd.MaxHeight = Screen(screenNumber).Height		  		  ' Use it as if your window was called Window1: (as extention)		  		  ' Window1.MaxWindowSize(0)		  ' OR USE IT AS FUNCTION:		  ' MaxWindowSize(Window1,0)		  		  ' Function was made by "swort"		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ModuloDT(LeftNum As Double, RightNum As Double, SignificantDigits As Integer = - 1) As Double		  // Function brought to you by: Jason_Adams		  // Subscribe to the DutchTools topic on the Real Software forums for updates (link is in Version Information note)		  		  Dim Quotient As Double = LeftNum / RightNum		  Dim Result As Double = Quotient.DecimalRightValueDT * RightNum		  		  Dim SigDigits As Integer		  Dim SigFormat As String		  		  If (SignificantDigits = -1) Then		    // Not Specified		    SigDigits = RightNum.DecimalRightCountDT		  Else		    // Specified		    SigDigits = SignificantDigits		  End If		  		  If (SigDigits > 0) Then		    SigFormat = "-#."		    For x As Integer = 1 To SigDigits		      SigFormat = SigFormat + "#"		    Next		  Else		    SigFormat = "-#"		  End If		  		  Return Val(Format(Result, SigFormat))		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function OccursDT(Extends cSearchWithin As String, cSearchFor As string) As integer		  '---  FINDS THE NUMBER OF OCCURENCES OF A STRING WITHIN ANOTHER STRING		  '---  USES THE NATIVE INSTR() FUNCTION		  '---  CASE INSENSITIVE		  '---		  '---  Syntax:  if Occurs(cSearchFor As String,cSearchWithin As String) > 0 then		  		  dim x as Integer = 0		  dim nStart As Integer = 1		  dim nFound as Integer = 0		  		  while nStart < len(cSearchWithin)		    x = instr(nStart,cSearchWithin, cSearchFor)		    if x > 0 then		      nFound = nFound + 1		      nStart = x + 1		    Else		      Exit		    end		  wend		  		  Return nFound		  		  ' Gave it string extention functionallity:		  		  ' Use as function: Syntax:  if Occurs(cSearchFor As String,cSearchWithin As String) > 0 then		  		  ' Or use as extention of string: 		  ' Dim s as String		  ' if s.Occours(cSearchFor As string) > 0 then		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ShowMSGDT(strTitle As String, strAction As String, strAltAction As String, strCancel As String, strMSG As String, strExplain As String, intIcon As Integer) As String		  		  // This function defines a custom Message dialog template which you		  // can use through your whole program. Make sure you define this function		  // as global.		  // Use :		  // blnResult = ShowMSG (Dialog_Title As String, Caption_Action As String, Caption_Alternative_Action As String, Caption_Cancel As String,		  //    Message As String, Explanation As String)		  // Resulting value : string value (pressed button caption is returned)		  		  // *** Important remark ***		  // *** MessageDialog uses the window and button classes appropriate for each platform, but the layout of teh window doesn't adjust to the		  // *** standard thereof		  // *** Thank you Jason Adams for this warning.		  		  // Define Custom MessageDialog		  		  Dim msgDialog As MessageDialog // Declare your basic MessageDialog		  Dim btnAction As MessageDialogButton // This is the dialog button		  Dim strResult As String		  		  msgDialog = New MessageDialog // Instantiate your own MessageDialog		  		  // Here we start to define your MessageDialog objects		  		  msgDialog.Title = strTitle // Title of the MessageDialog		  		  // Which icon to display?		  Select Case intIcon		  Case MessageDialog.GraphicNote, MessageDialog.GraphicCaution, MessageDialog.GraphicStop, MessageDialog.GraphicQuestion		    msgDialog.Icon = intIcon // Note icon onto the MessageDialog		  Case Else		    msgDialog.Icon = MessageDialog.GraphicNone		  End select		  		  // Which buttons to display ?		  If Len(Trim(strAction)) > 0 Then		    msgDialog.ActionButton.Caption = strAction		  Else		    msgDialog.ActionButton.Visible = False		  End If		  If Len(Trim(strAltAction)) > 0 Then		    msgDialog.AlternateActionButton.Caption = strAltAction		    msgDialog.AlternateActionButton.Visible = True		  Else		    msgDialog.AlternateActionButton.Visible = False		  End If		  If Len(Trim(strCancel)) > 0 Then		    msgDialog.CancelButton.Caption = strCancel		    msgDialog.CancelButton.Visible = True		  Else		    msgDialog.CancelButton.Visible = False		  End If		  		  // Display message		  msgDialog.Message = strMSG		  // Display explanation		  msgDialog.Explanation = strExplain		  		  // End of section define MessageDialog objects		  		  btnAction = msgDialog.ShowModal // This will display the actual dialog		  // Handling the result		  Select case btnAction // Which button is pressed		  Case msgDialog.ActionButton		    strResult = msgDialog.ActionButton.Caption		  Case msgDialog.AlternateActionButton		    strResult = msgDialog.AlternateActionButton.Caption		  Case msgDialog.CancelButton		    strResult = msgDialog.CancelButton.Caption		  End Select		  		  strResult = ReplaceAll(strResult, "&", "") // Remove "&" character when present		  		  Return strResult		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function StringToHexDT(src as string, separator as string) As string		  dim n, L, v as integer		  dim s as string		  L = LenB(src)		  for n=1 to L		    v = AscB(MidB(src, n, 1))		    s = s + RightB("00"+Hex(v),2)+separator		  next		  return LeftB(s, LenB(s)-LenB(separator))		  		  ' function suggested by: "charonn0"		  		  ' function explanation: ( from "charonn0" )		  ' Here's one that I use whenever I need to compare the output of RB's MD5() function with a MD5 stored as hex (which is the most common representation)		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function StrReverseDT(Extends s As String) As String		  if Len(s) < 2 then return s		  Dim m As MemoryBlock		  Dim c As String		  Dim pos, mpos, csize As Integer		  m = New MemoryBlock( s.LenB )		  pos = 1		  mpos = m.Size		  while mpos > 0		    c = Mid( s, pos, 1 )		    csize = c.LenB		    mpos = mpos - csize		    m.StringValue( mpos, csize ) = c		    pos = pos + 1		  wend		  return DefineEncoding( m.StringValue(0, m.Size), s.Encoding )		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub WindowToBottomRightDT(Extends Wnd As window)		  Dim MaxRight As Integer		  Dim MaxBottom As Integer		  		  MaxRight = ( Screen(0).Width - Wnd.Width )		  MaxBottom = ( Screen(0).Height - Wnd.Height )		  		  Wnd.Left = MaxRight		  Wnd.Top = MaxBottom		  		  ' function made by "Swort" the creator of this module. 		  ' suggestions are welcome.		  		  ' To call use eigther "WindowToBottomRight( WindowName )" or "WindowName.WindowToBottomRight"		  ' as you see very easy and usefull i hope.		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub WindowToCenterDT(Extends Wnd As window)		  Dim MaxRight As Integer		  Dim MaxBottom As Integer		  		  MaxRight = ( Screen(0).Width - Wnd.Width ) / 2		  MaxBottom = ( Screen(0).Height - Wnd.Height ) / 2		  		  Wnd.Left = MaxRight		  Wnd.Top = MaxBottom		  		  ' function made by "Swort" the creator of this module.		  ' suggestions are welcome.		  		  ' To call use eigther "WindowToBottomRight( WindowName )" or "WindowName.WindowToBottomRight"		  ' as you see very easy and usefull i hope.		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function XMLCleanStringDT(str as String, Lower as Integer, Upper as Integer) As String		  		  Dim l as Integer = str.LenB		  Dim final, bit as String = ""		  		  If l <> 0 Then		    For a As Integer = 0 To l		      bit = MidB(str, a, 1)		      If Asc(bit) > Lower AND Asc(bit) < Upper Then final = final + bit		    Next		    Return final		  Else		    Return ""		  End If		  		  ' Method made by: "Specialised" 		  ' Info from the forums:		  //Nice simple one I use for cleaning XML, which can bomb out with illegal characters if not done...		  //Simply pass the offending string, the Lower and Upper Ascii values you want in your string and it returns the clean string.		End Function	#tag EndMethod	#tag Note, Name = MIT Licence		Copyright (c) 2010 swort, and all users from forums.realsoftware.com who gave access to these functions.				Permission is hereby granted, free of charge, to any person obtaining a copy		of this software and associated documentation files (the "Software"), to deal		in the Software without restriction, including without limitation the rights		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell		copies of the Software, and to permit persons to whom the Software is		furnished to do so, subject to the following conditions:				The above copyright notice and this permission notice shall be included in		all copies or substantial portions of the Software.				THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN		THE SOFTWARE.					#tag EndNote	#tag Note, Name = Usage		See the notes in the functions for explanation.				See MIT Licence note for more info			#tag EndNote	#tag Note, Name = Version information		Any updates you can find on the swort server.		http://www.swort.eu/files/DutchTools.zip				You can subscript to the DutchTools topic here for any updates:		http://forums.realsoftware.com/viewtopic.php?f=1&t=36396&hilit=dutchtools+free				"sorry no website yet, were still waiting for RS Web Edition to be in release state"				This module was made in Holland and some functions where found on the User Forums from REALbasic		You can find the forums on http://forums.realsoftware.com/index.php				Current functions where from users: "denisc" and "serd83"				If you wish to have some functions added to the module (or a class) then please reply on this forum:		http://forums.realsoftware.com/viewtopic.php?t=36396				Updates (top is newest):		- Changed evey function name to end with DT, so they can be public without interfearance.		- Added function Moodulo		- Added function DecimalRightValue		- Added function DecimalRightCount		- Added function RevealDT wich is brought to you by: markwalsh		- Removed the DictionaryCloneDT function, because of community questions and/or errors in usage		- Updated IsLowerCase to be used as an extention to strings ( string.IsLowerCase ) thanks to Jason_Addams		- Added function Occurs by "jjfcpa" (gave it string extention possibilities)		- Added function ShowMSG by "Bad_Wolf" (FIXED: prpperties not assigned properly fix by "Bad_Wolf")		- Added function DictionaryClone by "Jason_Adams"			#tag EndNote	#tag Constant, Name = Black, Type = Color, Dynamic = False, Default = \"&c000000", Scope = Protected	#tag EndConstant	#tag Constant, Name = VersionDT, Type = String, Dynamic = False, Default = \"3.1", Scope = Protected	#tag EndConstant	#tag Constant, Name = White, Type = Color, Dynamic = False, Default = \"&cFFFFFF", Scope = Protected	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule