#tag ModuleProtected Module UtilsModule	#tag Method, Flags = &h0		Function AppCopyright() As string		  'const token = "©"		  'return token + kAppVersion_Long.NthField(token, 2)		  return "©2011-2014 Eduardo Gutierrez"		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function AppVersion_Long() As string		  return str(app.MajorVersion)+"."+str(app.MinorVersion)+" ("+str(app.StageCode)+")"		  'kAppVersion_Long.NthField(" ", 1)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function AppVersion_Short() As string		  return str(app.MajorVersion)+"."+str(app.MinorVersion)		  'kAppVersion_Long.NthField(" ", 1)		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ContainerControls(extends w as Window) As ContainerControl()		  dim theList() as ContainerControl		  dim o as Runtime.ObjectIterator = Runtime.IterateObjects		  while o.MoveNext		    if o.Current isA ContainerControl and ContainerControl(o.Current).Window is w  then		      theList.Append ContainerControl(o.Current)		    end if		  wend		  return theList		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function decodeHTMLEntities(extends myTxt as String) As string		  dim s,ss as string		  		  ss ="&,Œ,¹,³,²,<,>,Ä,Å,Á,Ç,É,Ñ,Ö,Ü,á,à,â,ä,ã,å,ç,é,è,ê,ë,í,ì,î,ï,ñ,ó,ò,ô,ö,õ,ú,ù,û,ü,Ý,°,¢,£,§,€,¶,ß,®,©,,´,¨,‚,Æ,Ø,±,¾,„,¥,µ,ª,º,æ,ø,¿,¡,¬,«,»,Š, ,À,Ã,Õ,‘,¦,­,‹,Œ,¹,÷,ÿ,,¤,Þ,þ,·,Â,Ë,È,Ê,Í,Î,Ï,Ì,Ó,Ô,Ò,Ú,Û,Ù,Ÿ,ý,”,¯,"		  		  s ="&amp;,&#145;,&#146;,&#147;,&#148;,&lt;,&gt;,&Auml;,&Aring;,&#193;,&Ccedil;,&Eacute;,&Ntilde;,&Ouml;,&Uuml;,&aacute;,&agrave;,&acirc;,&auml;,&atilde;,&aring;,&ccedil;,&eacute;,&egrave;,&ecirc;,&euml;,&iacute;,&igrave;,&icirc;,&iuml;,&ntilde;,&oacute;,&ograve;,&ocirc;,&ouml;,&otilde;,&uacute;,&ugrave;,&ucirc;,&uuml;,&#134;,&deg;,&cent;,&pound;,&sect;,&#149;,&para;,&szlig;,&reg;,&copy;,&#153;,&acute;,&uml;,<>,&AElig;,&Oslash;,&plusmn;,&lt;=,&gt;=,&yen;,&micro;,&ordf;,&ordm;,&aelig;,&oslash;,&iquest;,&iexcl;,&not;,&laquo;,&raquo;,...,&nbsp;,&Agrave;,&Atilde;,&Otilde;,&#140;,&#156;,&#150;,&#151;,',',&divide;,&yuml;,&#159;,Ä,fi,fl,&middot;,&Acirc;,&Euml;,&#200;,&#202;,&Iacute;,&Icirc;,&Iuml;,&Igrave;,&Oacute;,&Ocirc;,&Ograve;,&Uacute;,&Ucirc;,&Ugrave;,&#131;,&#135;,&#137;,&macr;,"		  		  'ss = "º"		  's = "&ordm;"		  		  dim j as integer = countFields(s, ",")		  		  'dim rg as regex		  'dim myMatch as RegExMatch		  'rg=new RegEx		  'rg.Options.caseSensitive = true		  'rg.Options.replaceAllMatches = true		  for i as integer = 1 to j		    'rg.SearchPattern= nthField(s, ",",i)		    'rg.ReplacementPattern = nthField(ss, ",",i)		    'myMatch=rg.search(myTxt)		    'myTxt=rg.replace(myTxt)		    		    dim needle1, needle2 as string		    needle1 = s.NthField(",",i)		    needle2 = ss.NthField(",",i)		    		    myTxt = myTxt.ReplaceAll(needle1,needle2).DefineEncoding(encodings.UTF8)		    		  next		  		  return myTxt		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub DrawStringCentered(extends g as graphics, s as string, width as integer, height as integer)		  		  // If our string has multiple lines, we have to center each one manually.		  		  dim strings(-1) as string		  dim i, iMax, x, y as integer		  		  if s.Contains(EndOfLine) then		    		    strings = Split(s, EndOfLine)		    		    iMax = UBound(strings)		    for i = 0 to iMax		      		      s = strings(i)		      x = (width/2) - g.StringWidth(s)/2		      y = (height/2) - g.TextHeight * iMax/2 + g.TextAscent * i		      g.DrawString(s, x, y)		      		    next i		    		  else		    		    x = (width/2) - g.StringWidth(s)/2		    y = (height/2) + g.TextAscent/2		    g.DrawString(s, x, y)		    		  end if		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function encodeHTMLEntities(extends myTxt as String) As string		  dim s,ss as string		  		  s ="&,Œ,¹,³,²,<,>,Ä,Å,Á,Ç,É,Ñ,Ö,Ü,á,à,â,ä,ã,å,ç,é,è,ê,ë,í,ì,î,ï,ñ,ó,ò,ô,ö,õ,ú,ù,û,ü,Ý,°,¢,£,§,€,¶,ß,®,©,,´,¨,‚,Æ,Ø,±,¾,„,¥,µ,ª,º,æ,ø,¿,¡,¬,«,»,Š, ,À,Ã,Õ,‘,¦,­,‹,Œ,¹,÷,ÿ,,¤,Þ,þ,·,Â,Ë,È,Ê,Í,Î,Ï,Ì,Ó,Ô,Ò,Ú,Û,Ù,Ÿ,ý,”,¯,"		  		  ss ="&amp;,&#145;,&#146;,&#147;,&#148;,&lt;,&gt;,&Auml;,&Aring;,&#193;,&Ccedil;,&Eacute;,&Ntilde;,&Ouml;,&Uuml;,&aacute;,&agrave;,&acirc;,&auml;,&atilde;,&aring;,&ccedil;,&eacute;,&egrave;,&ecirc;,&euml;,&iacute;,&igrave;,&icirc;,&iuml;,&ntilde;,&oacute;,&ograve;,&ocirc;,&ouml;,&otilde;,&uacute;,&ugrave;,&ucirc;,&uuml;,&#134;,&deg;,&cent;,&pound;,&sect;,&#149;,&para;,&szlig;,&reg;,&copy;,&#153;,&acute;,&uml;,<>,&AElig;,&Oslash;,&plusmn;,&lt;=,&gt;=,&yen;,&micro;,&ordf;,&ordm;,&aelig;,&oslash;,&iquest;,&iexcl;,&not;,&laquo;,&raquo;,...,&nbsp;,&Agrave;,&Atilde;,&Otilde;,&#140;,&#156;,&#150;,&#151;,',',&divide;,&yuml;,&#159;,Ä,fi,fl,&middot;,&Acirc;,&Euml;,&#200;,&#202;,&Iacute;,&Icirc;,&Iuml;,&Igrave;,&Oacute;,&Ocirc;,&Ograve;,&Uacute;,&Ucirc;,&Ugrave;,&#131;,&#135;,&#137;,&macr;,"		  		  'ss = "º"		  's = "&ordm;"		  		  dim j as integer = countFields(s, ",")		  		  'dim rg as regex		  'dim myMatch as RegExMatch		  'rg=new RegEx		  'rg.Options.caseSensitive = true		  'rg.Options.replaceAllMatches = true		  for i as integer = 1 to j		    'rg.SearchPattern= nthField(s, ",",i)		    'rg.ReplacementPattern = nthField(ss, ",",i)		    'myMatch=rg.search(myTxt)		    'myTxt=rg.replace(myTxt)		    		    dim needle1, needle2 as string		    needle1 = s.NthField(",",i)		    needle2 = ss.NthField(",",i)		    		    myTxt = myTxt.ReplaceAll(needle1,needle2).DefineEncoding(encodings.UTF8)		    		  next		  		  return myTxt		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function encodeURL(s as string) As string		  // Converts the input string to an encoded format suitable for use in URLs.		  // Non-alphanumeric characters are converted to "%xx" hexadecimal codes.		  dim a, bound, char as integer, result as string		  		  bound = len(s)		  for a = 1 to bound		    char = asc(mid(s, a, 1))		    if char < 16 then //add a zero		      result = result + "%0" + hex(char)		    elseif (char>47 and char<58) or (char>64 and char<91) or (char>96 and char<123) then		      result = result + chr(char) //0-9,A-Z,a-z		    else //special character		      result = result + "%"+ hex(char)		    end if		  next		  		  return result		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ExtensionDT(Extends f As FolderItem) As String		  If f.Directory Or CountFields(f.Name, ".") = 0 Then Return ""		  		  Return NthField(f.Name, ".", CountFields(f.Name, "."))		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ExtensionDT(Extends str As String) As String		  #if TargetWin32 then		    if str.right(1) = "\" then return ""		  #endif		  		  if str.right(1) = "/" then return ""		  		  if str.CountFields(".") = 0 Then Return ""		  		  Return str.NthField(".", str.CountFields("."))		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function isDirValid(extends currentPath as FolderItem) As boolean		  dim validSavePath as boolean = False		  		  log("Checking for Path: "+currentPath.POSIXPath)		  if currentPath <> nil then		    if currentPath.exists then		      log("Path invalid: "+currentPath.POSIXPath)		      if currentPath.Directory then		        if currentPath.IsWriteable then		           validSavePath = true		        else		          log("Not Writeable: "+currentPath.POSIXPath)		        end if		      else		        log("Not a directory: "+currentPath.POSIXPath)		      end if		    else		      log("Path doesn't exist. Creating: "+currentPath.POSIXPath)		      currentPath.CreateAsFolder		      validSavePath = currentPath.isDirValid		    end if		  end if		  		  return validSavePath		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function pathFile(Extends str As String) As String		  dim slash as string		  slash = "/"		  		  if str.right(1) = "/" then return str		  		  if str.CountFields(slash) = 0 Then Return str		  		  Return str.NthField(slash, str.CountFields(slash))		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ReplaceAppStrings(extends s as string) As string		  		  // This routine does replacements of standard string slugs		  // with the appropriate string at runtime. This way you can		  // construct strings in the UI or in a resource file with		  // generic slugs, then call this routine and have them all		  // replaced at once.		  //		  // This method is within AppConstants because it is expected		  // that several standard strings will arise in that area...		  		  if s.InStr("{") > 0 then // an optimization		    		    s = s.ReplaceAll("{AppName}", app.AppName)		    s = s.ReplaceAll("{AppVersion}", AppVersion_Short)		    s = s.ReplaceAll("{AppVersion_Short}", AppVersion_Short)		    s = s.ReplaceAll("{AppVersion_Long}", AppVersion_Long)		    s = s.ReplaceAll("{AppCopyright}", AppCopyright)		    s = s.ReplaceAll("{AppURL}", AppURL)		    s = s.ReplaceAll("{AppEmail}", AppEmail)		    		  end if		  		  return s		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ReplaceAppStrings(extends w as Window)		  		  // This routine does standard string replacement for		  // all controls within a window that typically benefit		  // from it, and also for the window's title bar.		  //		  // With this routine, you don't need to worry about		  // individual item replacement; just call this in the		  // window's Open event and you're all set.		  		  w.Title = w.Title.ReplaceAppStrings		  		  dim i as integer		  for i = 0 to w.ControlCount-1		    		    if w.Control(i) isA label then		      label(w.Control(i)).Text _		      = label(w.Control(i)).Text.ReplaceAppStrings		    end if		    		    if w.Control(i) isA EditField then		      EditField(w.Control(i)).Text _		      = EditField(w.Control(i)).Text.ReplaceAppStrings		    end if		    		    if w.Control(i) isA TextArea then		      TextArea(w.Control(i)).Text _		      = TextArea(w.Control(i)).Text.ReplaceAppStrings		    end if		    		  next i		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RevealDT(Extends f as FolderItem)		  // Made available to you by markwalsh		  // Please note the licence, and/or subscripe to the DutchTools module topic on the Real Software forums.		  // top see the topic here: http://forums.realsoftware.com/viewtopic.php?f=1&t=36396&hilit=dutchtools+free		  		  Dim shell1 as new Shell		  Dim cmd as string		  if f <> nil then		    if f.Exists then		      #IF TargetWin32 then		        cmd  = "explorer.exe /select,"+ chr(34)+ f.AbsolutePath+ chr(34)		        shell1.execute(cmd)		      #elseIf TargetMacOS then		        Shell1.Mode = 1		        		        'cmd = "open -R "+f.ShellPath		        'shell1.execute(cmd)		        'if shell1.ReadAll.len > 0 then		        'cmd = "osascript -e 'Tell application ""Finder"" to reveal """ + f.AbsolutePath + """' -e 'Tell application ""Finder"" to activate'"		        'shell1.execute( cmd)		        'end if		        'exit sub		        		        dim OSXVersion as string		        cmd = "sw_vers -productVersion"		        shell1.execute(cmd)		        OSXVersion = shell1.ReadAll		        if OSXVersion.NthField(".",2).val >= 6 then		          cmd = "open -R "+  f.POSIXPath		        else		          cmd = "osascript -e 'Tell application ""Finder"" to reveal """ + f.AbsolutePath + """' -e 'Tell application ""Finder"" to activate'"		        end if		        shell1.execute(cmd)		        		      #elseif TargetLinux		        'NOTE: Nautilus supports this since 2011-04-08, but I didn't want to put an additional check		        'So in case of doubt uncomment the second line and have gnome-open open just the directory.		        'cmd = "if [ $(which -s nautilus) -eq 1 ]; then nautilus "+f.URLPath+"; else gnome-open " + f.Parent.ShellPath+ chr(34)+"; fi"		        'cmd = "gnome-open "+f.parent.ShellPath		        'shell1.execute(cmd)		        f.parent.Launch		      #ENDIF		    end if		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ScaleAndCenterPict(extends c as canvas, p as Picture)		  dim xp,xpmask as Picture		  		  xp = newPicture(p.Width,p.Height,32)		  xpmask = newPicture(p.Width,p.Height,32)		  		  xpmask.Graphics.DrawPicture p.Mask,0,0		  xp.Mask.Graphics.DrawPicture xpmask,0,0		  xp.Graphics.DrawPicture p,0,0		  		  dim cw, ch, pw, ph, npw, nph as integer		  cw = c.Width		  ch = c.Height		  pw = p.Width		  npw = pw		  ph = p.Height		  nph = ph		  		  if npw > cw then		    npw = cw		    nph = (ph/pw) * npw		  end if		  		  if nph > ch then		    nph = ch		    npw = (pw/ph) * nph		  end if		  		  dim xpp as new picture(cw,ch,32)		  xpp.Transparent = 1		  		  xpp.Graphics.forecolor = &cffffff		  xpp.Graphics.FillRect(0,0,xpp.Graphics.width,xpp.Graphics.height)		  		  xpp.Graphics.DrawPicture(xp,(cw/2)-(npw/2),(ch/2)-(nph/2),npw,nph,0,0,pw,ph)		  		  c.Graphics.DrawPicture xpp,0,0		  'c.Graphics.DrawPicture xp,(cw/2)-(npw/2),(ch/2)-(nph/2),npw,nph,0,0,pw,ph		  		  ' Method created by: "ivanomonti"		  ' Edited by: "eduo"		  ' Info from the forums:		  ' This method will center a picture into a canvas		  ' And will scale if bigger than the canvas		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ScaleAndCenterPict1(extends c as canvas, p as Picture)		  dim xp,xpmask as Picture		  		  xp = newPicture(p.Width,p.Height,32)		  xpmask = newPicture(p.Width,p.Height,32)		  		  xpmask.Graphics.DrawPicture p.Mask,0,0		  xp.Mask.Graphics.DrawPicture xpmask,0,0		  xp.Graphics.DrawPicture p,0,0		  		  c.Graphics.DrawPicture xp,(c.Width/2)-(xp.Width/2),(c.Height/2)-(xp.Height/2)		  		  ' Method created by: "ivanomonti"		  ' Info from the forums:		  ' This method will center a picture into a canvas		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function secondsToTimestring(s as double) As string		  // hours:minutes:seconds,milliseconds		  dim M as Integer = s / 60		  s = s - M*60		  dim H as Integer = M / 60		  m = m - H*60		  		  'dim MS as Integer = 1000 * (S-floor(S))		  'S = Floor( S )		  		  dim seconds as string		  seconds = format(s,"00.000")		  dim MS as string = str(seconds).ReplaceAll(".",",")		  		  dim timeString as string		  'timeString = str(H)+":"+str(M)+":"+str(S)+","+str(MS)		  timeString = format(H,"00")+":"+format(M,"00")+":"+(MS)		  		  return timeString		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ShowMessageDialog(w as Window, icon as String, actionTxt as String, cancelTxt as String, altTxt as String, msg as String, explanation as String) As Integer		  dim d as new MessageDialog		  dim b as MessageDialogButton		  		  if icon = "ask" then		    d.Icon = MessageDialog.GraphicQuestion		  elseif icon = "note" then		    d.Icon = MessageDialog.GraphicNote		  elseif icon = "stop" then		    d.Icon = MessageDialog.GraphicStop		  end		  		  if Len(actionTxt) > 1 then		    d.ActionButton.Caption = actionTxt		  end		  d.CancelButton.Visible = cancelTxt <> ""		  if Len(cancelTxt) > 1 then		    d.CancelButton.Caption = cancelTxt		  end		  d.AlternateActionButton.Visible = altTxt <> ""		  if Len(altTxt) > 1 then		    d.AlternateActionButton.Caption = altTxt		  end		  d.Message = msg		  d.Explanation = explanation		  		  if w <> nil then		    w.Show // bring parent to front		  end		  		  if TargetMacOS and w <> nil then		    b = d.ShowModalWithin (w)		  else		    b = d.ShowModal () // Windows has problems with the Within() function when the win is not frontmost		  end		  		  select case b		  case d.ActionButton		    return 1		  case d.CancelButton		    return 2		  case d.AlternateActionButton		    return 3		  end		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function StripInvalidForPathname(Extends s As String, keepSpaces As Boolean = true) As String		  //===============================================================		  '		  '    StripInvalidForPathname( ) identifies and stripes away characters from		  '    potential file names that would make it more difficult to shell commands without		  '    first escaping the characters.  Use the removeSpaces option for smoother user		  '    experience on Terminal apps as well... the rest of the chars are invalid on		  '    one or more OS.		  '		  //===============================================================		  dim char_list as string		  dim c as string		  dim i as integer		  char_list="/\?%*:|<>()"+chr(34)		  If Not keepSpaces And ( s.InStr( " " ) > 0 ) Then s = Join( s.Split( " " ), "" )		  For I=1 to len(char_list)		    c=mid(char_list,i,1)		    If ( s.InStr( c) > 0 ) Then s = Join( s.Split( c), "" )		  Next I		  Return s		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function timeStringToSeconds(s as string) As double		  s = s.replaceallb( ",", "." )		  dim bla() as string = split( s, ":" )		  if UBound( bla ) = 2 then		    dim hours as Double = val( bla( 0 ) )		    dim mins as Double = val( bla( 1 ) )		    dim secs as Double = val( bla( 2 ) )		    		    dim thistime as double = hours*60*60 + mins*60 + Secs		    		    Return thistime		  else		    Return -1		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function URLDecode(extends s as String) As String		  Dim TempAns As String		  Dim CurChr As Integer		  		  CurChr = 1		  		  Do Until CurChr - 1 = Len(s)		    Select Case Mid(s, CurChr, 1)		    Case "+"		      TempAns = TempAns + " "		    Case "%"		      TempAns = TempAns + Chr(Val("&h" + Mid(s, CurChr + 1, 2)))		      CurChr = CurChr + 2		    Case Else		      TempAns = TempAns + Mid(s, CurChr, 1)		    End Select		    		    CurChr = CurChr + 1		  Loop		  		  return  TempAns		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function URLEncode(extends s as String) As string		  		  Dim TempAns As String		  Dim CurChr As Integer		  CurChr = 1		  Do Until CurChr - 1 = Len(s)		    Select Case Asc(Mid(s, CurChr, 1))		    Case 48 To 57, 65 To 90, 97 To 122		      TempAns = TempAns + Mid(s, CurChr, 1)		    Case 32		      TempAns = TempAns + "%" + Hex(32)		    Case Else		      TempAns = TempAns +"%" + Right("0" + Hex(Asc(Mid(s, CurChr, 1))), 2)		    End Select		    		    CurChr = CurChr + 1		  Loop		  		  return TempAns		  		  		End Function	#tag EndMethod	#tag Note, Name = About this module				This module contains constants -- and some closely related		methods -- that are used in the Build Settings dialog, and		in certain UI elements (the About box, for example). They		are collected into this module so that they can be seen		together, and easily reviewed for consistency and accuracy.				Most of the items are self-explanatory, but some deserve		special mention:				APPLICATION NAME				AppName is used within the application to refer to itself,		independent of platform. For example, instead of using the		application's filename, as in:				  "CrazyCal.exe must quit now."				it's better to show this to a user:				  "Crazy Calendar must quit now."				Other places that use this info: preference file name, menu		item titles, window titles...				Note that "AppFileName_[platform]" are also available here,		for easy review. You can use them in code to get the file		name of the executable, but it's probably better to get it		from the application's FolderItem, in case the executable		file has been renamed.				VERSION INFORMATION				Different operating systems make use of the version		information fields in Build Settings in different ways:				- On Macintosh, only LongVersion and PackageInfo are used.		- LongVersion is "Copyright" on Windows, "Version" on Mac.		- PackageInfo is "Description" on Windows, unlabelled on Mac.				I like my file information windows to show the copyright, URL,		and complete version number. Given the way the components are		displayed, I think the best cross-platform result comes from		putting the full version and copyright into LongVersion, and		putting the URL into PackageInfo. This necessitates a few		compromises:				- long version and copyright are extracted at runtime		  via methods in this module		- version number (four numbers plus release stage) must		  be maintained both in this module and in Build settings		  in RB 5.x, or in App properties in RB 2005 or later		- _AppVersion_Long constant is public (I'd make it private,		  but Build Settings won't recognize it if I do)				An alternative is to use platform-specific variants for the		various strings, but then they can't be reviewed at a glance.		One hopes that REALbasic will someday offer:				- the ability to define constants in terms of other constants		- Build Settings that support constants in _all_ fields		- user-defined order of items in classes and modules		- a nicer, dialog-free UI for viewing constants				Until then, this is the best I could come up with. :)	#tag EndNote	#tag Property, Flags = &h0		#tag Note			imagevenue.com,imagevenue.com/img.php;imagebam.com,imagebam.com/image/;imgur.com,imgur.com/		#tag EndNote		knownImageServices As String = "imagevenue.com,imagevenue.com/img.php;imagebam.com,imagebam.com/image/;imgur.com,imgur.com/"	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			issuu,issuu.com;submanga,submanga.com;youkioske,youkioske.com;youkioskex,youkioskex.com					#tag EndNote		knownSites As String = "issuu,issuu.com;submanga,submanga.com;youkioske,youkioske.com;youkioskex,youkioskex.com"	#tag EndProperty	#tag Property, Flags = &h0		picFormats As String = "jpg;jpeg;gif;png;bmp"	#tag EndProperty	#tag Property, Flags = &h0		ykCategories As JSONItem	#tag EndProperty	#tag Property, Flags = &h0		ykLanguages As String = "^AllLanguages,all;Español,es;English,en;Français,fr;Italiano,it;Português,pt;Deutsch,de;Other,Other"	#tag EndProperty	#tag Constant, Name = AppCreator, Type = String, Dynamic = False, Default = \"eduo", Scope = Public	#tag EndConstant	#tag Constant, Name = AppEmail, Type = String, Dynamic = False, Default = \"eduo@mac.com", Scope = Public	#tag EndConstant	#tag Constant, Name = AppURL, Type = String, Dynamic = False, Default = \"http://eduo.info/subsyncrosa/", Scope = Public	#tag EndConstant	#tag Constant, Name = PrefSavePath, Type = String, Dynamic = False, Default = \"savePath", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="knownImageServices"			Group="Behavior"			InitialValue="imagevenue.com,imagevenue.com/img.php;imagebam.com,imagebam.com/image/;imgur.com,imgur.com/"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="knownSites"			Group="Behavior"			InitialValue="issuu,issuu.com;submanga,submanga.com;mangastream;mangastream.com;youkioske,youkioske.com;youkioskex,youkioskex.com"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="picFormats"			Group="Behavior"			InitialValue="jpg;jpeg;gif;png;bmp"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="ykLanguages"			Group="Behavior"			InitialValue="^AllLanguages,all;Español,es;English,en;Français,fr;Italiano,it;Português,pt;Deutsch,de;Other,Other"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule