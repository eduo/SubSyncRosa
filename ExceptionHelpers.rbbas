#tag ModuleProtected Module ExceptionHelpers	#tag Method, Flags = &h0		Function Kind(extends x as RuntimeException) As string		  		  // This lets you show a human readable string for any		  // exception type. Note that we have appended " error"		  // to some type names, and paid attention to capitals		  // and spacing, to make these read better and more		  // consistently in text (or "kinder" -- get it?).		  //		  // Also note that some types are subclasses of other		  // types, so we test for the more specific types first.		  //		  // See the App.UnhandledException event for a use of this.		  		  if x isA EndException                    then return "end error"		  if x isA IllegalCastException            then return "illegal cast"		  if x isA InvalidParentException          then return "invalid parent"		  if x isA KeyChainException               then return "KeyChain error"		  if x isA KeyNotFoundException            then return "key not found"		  if x isA NilObjectException              then return "nil object"		  if x isA NoOpenTransportException        then return "no open transport"		  if x isA OLEException                    then return "OLE error"		  if x isA OutOfBoundsException            then return "out of bounds"		  if x isA OutOfMemoryException            then return "out of memory"		  'if x isA RBScriptAlReadyRunningException then return "RBScript already running"		  'if x isA RBScriptException               then return "RBScript error"		  if x isA RegExSearchPatternException     then return "RegEx search pattern"		  if x isA RegExException                  then return "RegEx error"		  if x isA RegistryAccesserrorException    then return "Registry access error"		  if x isA ServiceNotAvailableException    then return "service not available"		  if x isA ShellNotAvailableException      then return "shell not available"		  if x isA ShellNotRunningException        then return "shell not running"		  if x isA SOAPException                   then return "SOAP error"		  if x isA StackOverflowException          then return "stack overflow"		  if x isA TypeMismatchException           then return "type mismatch"		  if x isA UnsupportedFormatException      then return "unsupported format"		  if x isA XMLDOMException                 then return "XML DOM error"		  if x isA XMLException                    then return "XML error"		  if x isA XMLReaderException              then return "XML reader error"		  		  if x isa JSONException then return "JSON error"		  		  return "runtime error"		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub Log(msg as string, optional fold as boolean, optional marker as Picture)		  		  // This outputs the indicated string to our diagnostic log.		  // We use this instead of calling System.Log directly,		  // because it is less cluttering, and it allows us to		  // redirect the output as we like.		  //		  // (If RB allowed us to redirect System.Log itself, then we		  // wouldn't have to have a high-level class like MainWindow		  // referenced in a low-level module like this, sigh...)		  		  #if DebugBuild then		    		    System.Log(system.LogLevelWarning, msg)		    		  #else		    		    'if isdebugset = true then		    		    if Fold = true then		      msg = "{" + msg + "}"		    end if		    System.Log(system.LogLevelWarning, msg)		    'end if		    		  #endif		  		  		  		  // This is what you'd do if you had no alternate log mechanism.		  		  'System.Log (System.LogLevelInformation, msg)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RaiseException(message as string)		  		  // This raises a RuntimeException with the given message.		  // It lets your code raise more informative exceptions with		  // less clutter. For example:		  //		  //   const methodName = "MyMethod: "		  //   ...		  //   if currentValue < minimumValue then		  //     RaiseException methodName + "Value is below minimum"		  //   end if		  		  if DebugBuild then Log "Exception: " + message		  		  dim x as new RuntimeException		  x.Message = message		  raise x		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ShowException(x as RuntimeException)		  		  // This routine just displays information about the		  // indicated exception in a user-readable fashion.		  		  // Useful enhancements to think about:		  //		  // - custom dialog allowing user to Copy the text		  //   (for emailing to tech support, for instance)		  // - A button letting user email to tech support		  // - Quit/Continue options		  		  dim s as string = x.Message		  if s.Len = 0 then		    s = "No further details available"		  end if		  		  log("Exception: " + x.Kind + ". " + s + ".")		  MsgBox "Exception: " + x.Kind + "." + EndOfLine + EndOfLine + s + "."		  		End Sub	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule