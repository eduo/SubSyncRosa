#tag ModuleProtected Module helperModule	#tag Method, Flags = &h1		Protected Function FindTextHeight(fontName as string, fontSize as double, italic as Boolean, bold as Boolean) As integer		  		  'given fontname, fontsize, italic, bold		  'measure and return xHeight and capHeight		  		  dim measureP as picture		  		  measureP = new picture(128,128,32) 'must be big enough to draw text and do measurements		  		  'set up graphics to do drawing and measuring		  dim measureGraphics as Graphics = measureP.Graphics		  measureGraphics.TextFont = fontName		  measureGraphics.TextSize = fontSize		  measureGraphics.Bold = bold		  measureGraphics.Italic = italic		  		  'dim topMost, bottomMost as integer		  'plot and measure xheight		  'plot and measure capHeight		  'measureGraphics.ForeColor = rgb(255, 255, 255)		  'measureGraphics.FillRect (0, 0, measureGraphics.Width, measureGraphics.Height)		  'measureGraphics.ForeColor = rgb(0, 0, 0)		  'measureGraphics.DrawString("TPMOB", 5, 100) 'draw a sample		  		  return measureGraphics.StringHeight("TPMOB",measureGraphics.width)		  		  		Exception		  'return zeros if failure		  return 0		  		End Function	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub FindTextXandCapHeights(fontName as string, fontSize as double, italic as Boolean, bold as Boolean, byRef xHeight as integer, byRef capHeight as integer)		  		  'given fontname, fontsize, italic, bold		  'measure and return xHeight and capHeight		  		  dim measureP as picture		  		  measureP = new picture(128,128,32) 'must be big enough to draw text and do measurements		  		  'set up graphics to do drawing and measuring		  dim measureGraphics as Graphics = measureP.Graphics		  measureGraphics.TextFont = fontName		  measureGraphics.TextSize = fontSize		  measureGraphics.Bold = bold		  measureGraphics.Italic = italic		  		  dim topMost, bottomMost as integer		  		  'plot and measure xheight		  measureGraphics.ForeColor = rgb(255, 255, 255)		  measureGraphics.FillRect (0, 0, measureGraphics.Width, measureGraphics.Height)		  measureGraphics.ForeColor = rgb(0, 0, 0)		  measureGraphics.DrawString("mnoezx", 5, 100) 'draw a sample		  		  if FindVerticalPixelExtents(measureP, topMost, bottomMost) then		    xHeight = bottomMost - topMost + 1		  else		    xHeight = 0		  end		  		  		  'plot and measure capHeight		  measureGraphics.ForeColor = rgb(255, 255, 255)		  measureGraphics.FillRect (0, 0, measureGraphics.Width, measureGraphics.Height)		  measureGraphics.ForeColor = rgb(0, 0, 0)		  measureGraphics.DrawString("TPMOB", 5, 100) 'draw a sample		  		  if FindVerticalPixelExtents(measureP, topMost, bottomMost) then		    capHeight = bottomMost - topMost + 1		  else		    capHeight = 0		  end		  		  		  		Exception		  'return zeros if failure		  xHeight = 0		  capHeight = 0		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function FindVerticalPixelExtents(p as picture, byRef topMost as integer, byRef bottomMost as integer) As boolean		  		  'find the vertical pixel extents of a graphic, assumes upper left corner pixel is background color		  'returns true if both bounds were found		  		  dim bgColorGreen as integer		  dim x, xMax, y, yMax as integer		  dim pSurf as RGBSurface = p.RGBSurface		  		  dim foundTop, foundBottom as Boolean		  		  try		    		    'get background color		    bgColorGreen = pSurf.pixel(0,0).green		    		    'find top extent		    xMax = p.Width - 1		    yMax = p.Height - 1		    		    #pragma BackgroundTasks false 'for speed		    for y = 0 to yMax		      for x = 0 to xMax		        if pSurf.Pixel(x,y).Green <> bgColorGreen then		          topMost = y		          foundTop = true		          exit for y		        end		      next		    next		    		    		    'find bottom extent		    xMax = p.Width - 1		    yMax = p.Height - 1		    		    for y = yMax Downto 0		      for x = 0 to xMax		        if pSurf.Pixel(x,y).Green <> bgColorGreen then		          bottomMost = y		          foundBottom = true		          exit for y		        end		      next		    next		    		    return foundTop and foundBottom		    		  catch		    return false		  end		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getStringHeights(g as graphics) As integer		  dim xheight, capheight as integer		  dim fontName as string		  dim fontSize as double		  dim italic as Boolean		  dim bold as Boolean		  		  fontname = g.TextFont		  fontSize = g.TextSize		  italic = g.Italic		  bold = g.Bold		  		  'FindTextXandCapHeights("helvetica", 24, false, false, xheight, capheight)		  dim gheight as integer		  gHeight = FindTextHeight(fontname, fontSize, italic, bold)		  		  return gheight		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getStringXAndCapHeights(g as graphics) As integer		  dim xheight, capheight as integer		  dim fontName as string		  dim fontSize as double		  dim italic as Boolean		  dim bold as Boolean		  		  fontname = g.TextFont		  fontSize = g.TextSize		  italic = g.Italic		  bold = g.Bold		  		  'FindTextXandCapHeights("helvetica", 24, false, false, xheight, capheight)		  FindTextXandCapHeights(fontname, fontSize, italic, bold, xheight, capheight)		  		  'dim p as picture		  'p = new picture (0,capheight,32)		  		  return capheight		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function readLines(extends t as TextInputStream, encoding as TextEncoding = Nil) As string()		  dim textLines() as String		  dim text as string		  		  if encoding is nil then		    dim s as string		    s = t.ReadAll		    dim enc as TextEncoding		    enc = s.Encoding		  end if		  		  t.PositionB = 0		  text = t.ReadAll(encoding)		  		  text = ReplaceLineEndings(text,EndOfLine.Windows)		  		  for i as integer = 1 to text.CountFields(EndOfLine.Windows)		    textLines.Append text.NthField(EndOfLine.Windows,i)		  next		  '		  'do until t.EOF		  'textLines.Append t.ReadLine(encoding)		  'loop		  return textLines		  		End Function	#tag EndMethod	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			Type="String"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule